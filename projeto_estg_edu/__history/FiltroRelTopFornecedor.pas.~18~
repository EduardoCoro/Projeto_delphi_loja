unit FiltroRelTopFornecedor;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Mask, JvExMask, JvToolEdit, ExtCtrls, Buttons, rxToolEdit;

type
  TTFiltroRelTopFuncionario = class(TForm)
    Panel1: TPanel;
    btnImprimir: TBitBtn;
    btnCancelar: TBitBtn;
    FiltroRelCliente: TPanel;
    rgOrdem: TRadioGroup;
    GroupBox1: TGroupBox;
    Label4: TLabel;
    Label2: TLabel;
    edDataFim: TDateEdit;
    edDataInicio: TDateEdit;
    procedure btnCancelarClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnImprimirClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure edDataFimExit(Sender: TObject);
    procedure edDataInicioExit(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure Chamatela;
  end;

var
  TFiltroRelTopFuncionario: TTFiltroRelTopFuncionario;

implementation

uses
 RelTopFornecedor, Funcoes;

{$R *.dfm}

procedure TTFiltroRelTopFuncionario.btnCancelarClick(Sender: TObject);
begin
  Close;
end;

procedure TTFiltroRelTopFuncionario.FormCreate(Sender: TObject);
begin
  edDataFim.Date := date();
  edDataInicio.Date := StrToDate('01/' + MesAno(date()));;
end;

procedure TTFiltroRelTopFuncionario.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  case key of
    VK_F5:
    begin
      if (btnImprimir.Enabled) and (btnImprimir.Visible) then
        btnImprimir.Click;
    end;
    VK_ESCAPE:
    begin
      if (btnCancelar.Enabled) and (btnCancelar.Visible) then
        btnCancelar.Click;
    end;
  end;
end;

procedure TTFiltroRelTopFuncionario.btnImprimirClick(Sender: TObject);
VAR CanClose : boolean;
begin
  CanClose := True;
  //ValidarDataInicialFinal(edDataInicio, edDataFim);
  {
  if not (edDataInicio.Date <> 0) then
  begin
    MessageBox(Handle,'Preencha o campo da data !','Campo data está vazio! ',MB_ICONQUESTION+MB_OK);
    CanClose := False;
    if edDataInicio.CanFocus then
      edDataInicio.SetFocus;
  end;  }
  if CanClose = True then
  begin
    TRelTopFornecedor.Chamatela(rgOrdem.ItemIndex,edDataInicio.Date, edDataFim.Date);
  end;
end;

procedure TTFiltroRelTopFuncionario.Chamatela;
begin
  TFiltroRelTopFuncionario := TTFiltroRelTopFuncionario.Create(Application);
  with TFiltroRelTopFuncionario do
  begin
    ShowModal;
  end;
  FreeAndNil(TFiltroRelTopFuncionario);
end;

procedure TTFiltroRelTopFuncionario.edDataFimExit(Sender: TObject);
begin
  if (edDataFim.Date <= 0) and (edDataFim.Text <> '  /  /    ') then
  begin
    EnviaMensagem('Data Inválida!','Atenção...',mtInformation,[mbOK]);
    edDataFim.Clear;
    if edDataFim.CanFocus then
      edDataFim.SetFocus;
    exit;
  end;
   if edDataFim.Date > date() then
  begin
    EnviaMensagem('A Data é maior que a data atual!','Atenção...',mtInformation,[mbOK]);
    edDataFim.Clear;
    exit;
  end;
end;

procedure TTFiltroRelTopFuncionario.edDataInicioExit(Sender: TObject);
begin
  if (edDataInicio.Date <= 0) and (edDataInicio.Text <> '  /  /    ') then
  begin
    EnviaMensagem('Data Inválida!','Atenção...',mtInformation,[mbOK]);
    edDataInicio.Clear;
    if edDataInicio.CanFocus then
      edDataInicio.SetFocus;
    exit;
  end;
  if edDataInicio.Date > date() then
  begin
    EnviaMensagem('A Data é maior que a data atual!','Atenção...',mtInformation,[mbOK]);
    edDataInicio.Clear;
    exit;
  end;
end;

end.
