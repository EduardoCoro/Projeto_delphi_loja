unit RelCompraModelFornecedor;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, RLReport, pngimage, DB, ADODB;

type
  TTRelCompraModelFornece = class(TForm)
    QCompra: TADOQuery;
    dtsCompra: TDataSource;
    RLCompra: TRLReport;
    RLBand5: TRLBand;
    RLImage1: TRLImage;
    RLLabel5: TRLLabel;
    RLLabel6: TRLLabel;
    RLLabel7: TRLLabel;
    RLLabel8: TRLLabel;
    RLBand6: TRLBand;
    RLPanel11: TRLPanel;
    RLDBResult1: TRLDBResult;
    RLBand7: TRLBand;
    RLSystemInfo1: TRLSystemInfo;
    RLSystemInfo2: TRLSystemInfo;
    RLSystemInfo3: TRLSystemInfo;
    RLSystemInfo4: TRLSystemInfo;
    RLGroup1: TRLGroup;
    RLBand3: TRLBand;
    RLPanel1: TRLPanel;
    RLLabel2: TRLLabel;
    RLPanel2: TRLPanel;
    RLLabel3: TRLLabel;
    RLPanel3: TRLPanel;
    RLLabel4: TRLLabel;
    RLPanel13: TRLPanel;
    RLLabel10: TRLLabel;
    RLPanel5: TRLPanel;
    RLLabel9: TRLLabel;
    RLBand4: TRLBand;
    RLPanel6: TRLPanel;
    RLDBText1: TRLDBText;
    RLPanel7: TRLPanel;
    RLDBText2: TRLDBText;
    RLPanel8: TRLPanel;
    RLDBText4: TRLDBText;
    RLPanel9: TRLPanel;
    RLDBText5: TRLDBText;
    RLPanel10: TRLPanel;
    RLDBText6: TRLDBText;
    RLBand9: TRLBand;
    RLPanel4: TRLPanel;
    RLLabel11: TRLLabel;
    RLPanel12: TRLPanel;
    RLLabel12: TRLLabel;
    RLPanel14: TRLPanel;
    RLLabel13: TRLLabel;
    RLPanel15: TRLPanel;
    RLLabel14: TRLLabel;
    RLPanel16: TRLPanel;
    RLLabel15: TRLLabel;
    RLBand8: TRLBand;
    RLPanel17: TRLPanel;
    RLDBText3: TRLDBText;
    RLPanel18: TRLPanel;
    RLDBText7: TRLDBText;
    RLPanel19: TRLPanel;
    RLDBText8: TRLDBText;
    RLPanel20: TRLPanel;
    RLDBText9: TRLDBText;
    RLPanel21: TRLPanel;
    RLDBText10: TRLDBText;
    RLBand10: TRLBand;
    RLPanel22: TRLPanel;
    RLDBResult2: TRLDBResult;
    RLBand1: TRLBand;
    RLPanel23: TRLPanel;
    RLLabel16: TRLLabel;
    RLPanel24: TRLPanel;
    RLDBText11: TRLDBText;
    RLBand2: TRLBand;
    RLLabel1: TRLLabel;
    lbltitulo: TRLLabel;
    procedure QCompraPRECOGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
    procedure QCompraVALORGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
  private
    { Private declarations }
    Taux : integer;
    procedure Carregadados( CodCli : TStringlist ; Xordem : integer; Fornecedor : TStringlist; Xdataini, xdatafim : TDateTime);
  public
    { Public declarations }
    procedure Chamatela(CodCli : TStringlist ; Xordem : integer; Fornecedor : TStringlist; Xdataini, xdatafim : TDateTime);

  end;

var
  TRelCompraModelFornece: TTRelCompraModelFornece;

implementation

uses
 Funcoes, Funcoesdb;

{$R *.dfm}

procedure TTRelCompraModelFornece.Chamatela(CodCli: TStringList; Xordem: Integer; Fornecedor: TStringlist; Xdataini: TDateTime; xdatafim: TDateTime);
begin
  TRelCompraModelFornece := TTRelCompraModelFornece.Create(Application);
  with TRelCompraModelFornece do
  begin
    //informando a data ini e fim
    lbltitulo.Caption := 'Por data: ' + DateToStr(xDataIni) + ' a ' + DateToStr(xDataFim) ;
    // ordenação
    case Xordem of
      0: lbltitulo.Caption := lbltitulo.Caption + ' Ordernado pelo Codigo de compra';  //Codigo Compra
      1: lbltitulo.Caption := lbltitulo.Caption + ' Ordernado por Codigo e Fornecedor';  //Fornecedor
      2: lbltitulo.Caption := lbltitulo.Caption + ' Ordernado pelo Cliente';  // cliente
      3: lbltitulo.Caption := lbltitulo.Caption + ' Ordernado da Data Maior';  // Data maior
      4: lbltitulo.Caption := lbltitulo.Caption + ' Ordernado da Data Menor';   // data menor
    end;
    Carregadados(CodCli,Xordem, Fornecedor,Xdataini,xdatafim);
    if Taux <> 1 then
      RLCompra.PreviewModal
    else
    begin
      //ShowModal;
      CloseModal;
    end;
  end;
  FreeAndNil(TRelCompraModelFornece);
end;

procedure TTRelCompraModelFornece.QCompraPRECOGetText(Sender: TField;
  var Text: string; DisplayText: Boolean);
begin
  Text := FormatFloat('0.00', QCompra.FieldByName('PRECO').AsFloat);
end;

procedure TTRelCompraModelFornece.QCompraVALORGetText(Sender: TField;
  var Text: string; DisplayText: Boolean);
begin
  Text := FormatFloat('0.00', QCompra.FieldByName('VALOR').AsFloat);
end;

procedure TTRelCompraModelFornece.Carregadados(CodCli: TStringList; Xordem: Integer; Fornecedor: TStringlist; Xdataini: TDateTime; xdatafim: TDateTime);
var aux : integer;
begin
  aux :=0;
  with QCompra do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SET DATEFORMAT ymd ');
    SQL.Add('SELECT  A.COD_COMPRA, A.COD_CLIENTE , A.DATA, A.VALOR_TOTAL ,C.NOME, F.COD_FORNECEDOR, F.NOME AS FORNECEDOR ,I.COD_PRODUTO, P.DESCRICAO, P.PRECO, I.QUANTIDADE, P.PRECO * I.QUANTIDADE AS VALOR ');
    SQL.Add('FROM ITENS_COMPRA I ');
    SQL.Add('INNER JOIN COMPRA AS A ON A.COD_COMPRA = I.COD_COMPRA ');
    SQL.Add('INNER JOIN PRODUTO AS P ON P.COD_PRODUTO = I.COD_PRODUTO ');
    SQL.Add('INNER JOIN CLIENTE C ON C.COD_CLIENTE = A.COD_CLIENTE ');
    SQL.Add('INNER JOIN FORNECEDOR F ON F.COD_FORNECEDOR = P.COD_FORNECEDOR ');
    // clausula where

    if (CodCli.DelimitedText <> '' ) then
      SQL.Add(GetCondicao(aux) +' C.COD_CLIENTE IN ('+ CodCli.DelimitedText+ ')');
    if (Fornecedor.DelimitedText <> '')  then
      SQL.Add(GetCondicao(aux) + ' F.COD_FORNECEDOR IN ('+ Fornecedor.DelimitedText + ')');

    if (xDataIni <> 0) and (xDataFim <> 0) then
    begin
      SQL.Add( GetCondicao(aux) + ' A.DATA  '+ DataBetweenSQL(xDataIni,xDataFim));
    end
    else
    begin
      if (xDataIni <> 0) then
        SQL.Add( GetCondicao(aux) + ' A.DATA  = '+ DataSQL(xDataIni));
      if (xDataFim <> 0) then
        SQL.Add( GetCondicao(aux) + ' A.DATA  = '+ DataSQL(xDataFim));
    end;

    {ORDENAÇÃO POR ....}
    case Xordem of
      0: SQL.Add('Order by A.COD_COMPRA');  //Codigo Compra
      1: SQL.Add('Order by A.COD_COMPRA, F.NOME');  //Fornecedor
      2: SQL.Add('Order by A.COD_CLIENTE');  // cliente
      3: SQL.Add('Order by A.DATA DESC');  // Data maior
      4: SQL.Add('Order by A.DATA ASC');   // data menor
    end;

    Open;

    // COLOCANDO ZEROS ADICIONAIS DEPOIS DA VIRGULA, TRATAMENTO DE VALOR
    FieldByName('PRECO').OnGetText := QCompraPRECOGetText;
    FieldByName('VALOR').OnGetText := QCompraVALORGetText;

    if IsEmpty then
    begin
      EnviaMensagem('Nenhum registro encontrado','',mtInformation,[mbOK]);
      Taux:= 1;
    end;
  end;
end;

end.
